name: docker test
description: Builds the scaler docker image
inputs:
  assemblyVersion:
    description: The scaler assembly's version.
    required: true
  buildConfiguration:
    default: Debug
    description: The dotnet build configuration
    required: false
  fileVersion:
    description: The scaler assembly's file version.
    required: true
  imageRepository:
    default: durabletask-azurestorage-scaler
    description: The repository used for the scaler image.
    required: false
  imageTag:
    description: The tag to use for the images.
    required: true
  sign:
    default: 'false'
    description: Indicates whether the assemblies in the image should be code signed.
    required: false
  azureTenantId:
    default: ''
    description: The Azure tenant ID for service principal used to access the Azure Code Signing Service.
    required: false
  azureClientId:
    default: ''
    description: The client ID for the service principal used to access the Azure Code Signing Service.
    required: false
  azureSubscriptionId:
    default: ''
    description: The Azure subscription ID containing both the Azure Code Signing Service.
    required: false
  azureCodeSigningAccountName:
    default: ''
    description: The name of the Azure Code Signing account containing the scaler's certificate profile.
    required: false
  certificateProfileName:
    default: ''
    description: The name of the certificate profile within the Azure Code Signing Service.
  codeSigningUri:
    default: 'https://wus.codesigning.azure.net/'
    description: The URI of the Azure Code Signing Service.
    required: false
  repositoryUri:
    default: 'https://github.com/wsugarman/durabletask-azurestorage-scaler'
    description: The URI of the scaler repository.
    required: false

runs:
  using: composite
  steps:
    - if: ${{ inputs.sign == 'true' }}
      name: az login
      uses: azure/login@v1
      with:
        client-id: ${{ inputs.azureClientId }}
        tenant-id: ${{ inputs.azureTenantId }}
        subscription-id: ${{ inputs.azureSubscriptionId }}

    - if: ${{ inputs.sign == 'true' && success() }}
      name: Create Signing Parameters
      shell: bash
      run: |
        cat << EOF >> ${{ runner.temp }}/signing/parameters.json
        {
          "Endpoint":"${{ inputs.codeSigningUri }}",
          "CodeSigningAccountName":"${{ inputs.azureCodeSigningAccountName }}",
          "CertificateProfileName":"${{ inputs.certificateProfileName }}",
          "FileDigest":"SHA256",
          "TimestampRfc3161":"http://timestamp.acs.microsoft.com",
          "TimestampDigest":"SHA256",
          "Description":"A KEDA external scaler for the Durable Task Azure Storage backend.",
          "DescriptionUrl":"${{ inputs.repositoryUri }}"
        }
        EOF

    - name: Generate OCI Labels
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: |
          ${{ inputs.imageRepository }}
        tags: |
          type=semver,pattern={{version}},value=v${{ inputs.imageTag }}

    - name: Build Scaler Image
      uses: docker/build-push-action@v4
      with:
        build-args: |
          ASSEMBLY_VERSION=${{ inputs.assemblyVersion }}
          BUILD_CONFIGURATION=${{ inputs.buildConfiguration }}
          CONTINUOUS_INTEGRATION_BUILD=true
          FILE_VERSION=${{ inputs.fileVersion }}
        context: .
        file: ./src/Keda.Scaler.DurableTask.AzureStorage/Dockerfile
        labels: ${{ steps.meta.outputs.labels }}
        push: false
        secret-files: |
          credentials=$HOME/.aws/credentials
          signing=${{ runner.temp }}/signing/parameters.json
        tags: ${{ steps.meta.outputs.tags }}

    - name: Save Image
      shell: bash
      run: |
        output="${{ runner.temp }}/image/durabletask-azurestorage-scaler-${{ inputs.imageTag }}.tar"
        mkdir -p $(dirname $output)
        docker save -o $output ${{ inputs.imageRepository }}:${{ inputs.imageTag }}

    - name: Upload Image
      uses: actions/upload-artifact@v3
      with:
        name: image
        path: ${{ runner.temp }}/image/durabletask-azurestorage-scaler-${{ inputs.imageTag }}.tar

    - if: ${{ inputs.sign == 'true' && always() }}
      name: Delete Signing Parameters
      shell: bash
      run: |
        rm -f "${{ runner.temp }}/signing/parameters.json"

    - if: ${{ inputs.sign == 'true' && always() }}
      name: az logout
      shell: bash
      run: |
        az logout
        az cache purge
        az account clear
