name: docker push
description: Loads and pushes the docker image if it does not already exist in the registry
inputs:
  gitHubToken:
    description: The GitHub access token from the secret context
    required: true
  imageArchive:
    description: The TAR archive containing the docker image
    required: true
  imageRepository:
    description: The repository used for the scaler image
    required: true
  imageTag:
    description: The tag to use for the images
    required: true
  pushLatest:
    default: 'false'
    description: Indicates whether the image should also be pushed with the latest tag
    required: false
outputs:
  success:
    description: Indicates whether the image was successfully pushed
    value: ${{ steps.exists.outputs.result != 'true' }}

runs:
  using: composite
  steps:
    - name: Load Docker Image
      shell: bash
      run: docker load --input ${{ inputs.imageArchive }}

    - name: Login to ghcr.io
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.gitHubToken }}

    - name: Check ghcr.io for Image Tag
      id: exists
      uses: actions/github-script@v6
      with:
        script: |
          try {
            // Check for the package version
            const repository = '${{ inputs.imageRepository }}';
            const pkg = await github.rest.packages.getPackageVersionForUser({
              package_type: 'container',
              package_name: repository.includes('/') ? repository.substring(repository.lastIndexOf('/') + 1) : repository,
              package_version_id: '${{ inputs.imageTag }}',
              username: '${{ github.repository_owner }}'
            });

            return 'true'
          }
          catch (httpError) {
            // A missing package version will throw a 404
            if (httpError.status == 404) {
              return 'false'
            } else {
              throw httpError;
            }
          }
        result-encoding: string

    - name: Push Docker Image
      if: ${{ steps.exists.outputs.result != 'true' }}
      shell: bash
      run: docker push ${{ inputs.imageRepository }}:${{ inputs.imageTag }}

    - name: Push Latest Docker Image
      if: ${{ (steps.exists.outputs.result != 'true') && (inputs.pushLatest == 'true') }}
      shell: bash
      run: |
        docker tag ${{ inputs.imageRepository }}:${{ inputs.imageTag }} ${{ inputs.imageRepository }}:latest
        docker push ${{ inputs.imageRepository }}:latest
