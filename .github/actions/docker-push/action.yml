name: docker push
description: Loads and pushes the docker image if it does not already exist in the registry
inputs:
  force:
    default: 'false'
    description: Indicates whether the image should be pushed regardless of the tag existence
    required: false
  gitHubToken:
    description: The GitHub access token from the secret context
    required: true
  imageArchive:
    default: ''
    description: The tarball containing the docker image
    required: false
  imageRepository:
    description: The repository used for the scaler image
    required: true
  imageTag:
    description: The tag to use for the images
    required: true
  pushLatest:
    default: 'false'
    description: Indicates whether the image should also be pushed with the latest tag
    required: false
outputs:
  digest:
    description: An abbreviated digest for the image
    value: ${{ steps.metadata.outputs.digest }}
  success:
    description: Indicates whether the image was successfully pushed
    value: ${{ steps.exists.outputs.result != 'true' }}

runs:
  using: composite
  steps:
    - name: Load Docker Image
      shell: bash
      if: ${{ inputs.imageArchive != '' }}
      run: docker load --input ${{ inputs.imageArchive }}

    - name: Login to ghcr.io
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.gitHubToken }}

    - name: Check ghcr.io for Image Tag
      id: exists
      uses: actions/github-script@v6
      if: ${{ inputs.force != 'true' }}
      with:
        script: |
          const repository = '${{ inputs.imageRepository }}';
          const packageName = repository.includes('/') ? repository.substring(repository.lastIndexOf('/') + 1) : repository;

          try {
            // Check for the package version
            const versions = await github.rest.packages.getAllPackageVersionsForPackageOwnedByUser({
              package_type: 'container',
              package_name: packageName,
              username: '${{ github.repository_owner }}'
            });

            if (versions.data.find(v => v.metadata.container.tags.find(t => t == '${{ inputs.imageTag }}'))) {
              console.log(`Docker tag '${{ inputs.imageTag }}' already exists.`);
              return 'true';
            } else {
              console.log(`Docker tag '${{ inputs.imageTag }}' does not yet exist.`);
              return 'false';
            }
          }
          catch (httpError) {
            // No package versions is the same as missing
            if (httpError.status == 404) {
              console.log(`Container package '${packageName}' does not yet exist.`);
              return 'false'
            } else {
              throw httpError;
            }
          }
        result-encoding: string

    - name: Push Docker Image
      shell: bash
      if: ${{ (inputs.force == 'true') || (steps.exists.outputs.result != 'true') }}
      run: docker push ${{ inputs.imageRepository }}:${{ inputs.imageTag }}

    - name: Push Latest Docker Image
      shell: bash
      if: ${{ (steps.exists.outputs.result != 'true') && (inputs.pushLatest == 'true') }}
      run: |
        docker tag ${{ inputs.imageRepository }}:${{ inputs.imageTag }} ${{ inputs.imageRepository }}:latest
        docker push ${{ inputs.imageRepository }}:latest

    - name: Inspect Docker Image
      id: metadata
      shell: bash
      if: ${{ (inputs.force == 'true') || (steps.exists.outputs.result != 'true') }}
      run: |
        docker pull ${{ inputs.imageRepository }}:${{ inputs.imageTag }}
        result=$(docker image inspect ${{ inputs.imageRepository }}:${{ inputs.imageTag }} -f '{{index .RepoDigests 0}}')
        digest=${result#*@}
        digest=${digest#*:}
        digest=${digest:0:7}
        echo "digest=$digest" >> $GITHUB_OUTPUT
