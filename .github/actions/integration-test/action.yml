name: integration test
description: Ensures the external scaler installation succeeds and can properly scale function apps
inputs:
  buildConfiguration:
    default: Debug
    description: The dotnet build configuration
    required: false
  functionAppName:
    default: example-function-app
    description: The Kubernetes namespace for the function app.
    required: false
  functionAppNamespace:
    default: test
    description: The Kubernetes namespace for the function app.
    required: false
  localTag:
    description: The tag to use for the images.
    required: true
  maxActivitiesPerWorker:
    default: '2'
    description: The maximum number of activities per worker.
    required: false
  taskHubName:
    default: ExampleTaskHub
    description: The name of the Durable Task Hub.
    required: false
  testActivityDuration:
    default: 00:00:30
    description: The duration of each activity.
    required: false
  testStatusPollingInterval:
    default: 00:00:05
    description: The polling interval when checking test conditions.
    required: false
  testTimeout:
    default: 00:10:00
    description: The timeout for each test case.
    required: false

runs:
  using: composite
  steps:
    - name: Setup dotnet
      uses: actions/setup-dotnet@v3

    - name: Build Scaler Image
      shell: bash
      run: docker build -f "./src/Keda.Scaler.DurableTask.AzureStorage/Dockerfile" -t "durabletask-azurestorage-scaler:${{ inputs.localTag }}" .

    - name: Build Function App Image
      shell: bash
      run: docker build -f "./tests/Keda.Scaler.WebJobs.DurableFunctions.Examples/Dockerfile" -t "example-function-app:${{ inputs.localTag }}" .

    - name: Create Kind Cluster
      shell: bash
      run: |
        go install sigs.k8s.io/kind@latest
        kind create cluster --name integration
        kind load docker-image "durabletask-azurestorage-scaler:${{ inputs.localTag }}" "example-function-app:${{ inputs.localTag }}" --name integration
        kubectl config use-context kind-integration

    - name: Install KEDA
      shell: bash
      run: |
        helm repo add kedacore https://kedacore.github.io/charts
        helm repo update
        helm install \
          -n keda \
          --create-namespace \
          --wait \
          --timeout 2m \
          keda \
          kedacore/keda

    - name: Install Scaler Helm Chart
      shell: bash
      run: |
        helm install \
          -n keda \
          --create-namespace \
          --set image.repository=durabletask-azurestorage-scaler \
          --set image.tag=${{ inputs.localTag }} \
          --wait \
          --timeout 30s \
          dtfx-scaler \
          ./charts/durabletask-azurestorage-scaler

    - name: Install Azurite Helm Chart
      shell: bash
      run: helm install -n azure --create-namespace --wait --timeout 30s azurite ./charts/azurite

    - name: Install Function App Helm Chart
      shell: bash
      run: |
        helm install \
          -n ${{ inputs.functionAppNamespace }} \
          --create-namespace \
          --set externalScaler.serviceName=dtfx-scaler \
          --set image.repository=example-function-app \
          --set image.tag=${{ inputs.localTag }} \
          --set "taskHub.connectionString=DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://azurite.azure:10000/devstoreaccount1;QueueEndpoint=http://azurite.azure:10001/devstoreaccount1;TableEndpoint=http://azurite.azure:10002/devstoreaccount1;" \
          --set taskHub.name=${{ inputs.taskHubName }} \
          --set taskHub.maxActivitiesPerWorker=${{ inputs.maxActivitiesPerWorker }} \
          --wait \
          --timeout 30s \
          ${{ inputs.functionAppName }} \
          ./charts/example-function-app

    - name: Set Test Options
      shell: bash
      run: |
        echo "DurableTask__ConnectionName=DurableTask:ConnectionString" >> $GITHUB_ENV
        echo "DurableTask__ConnectionString=DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;QueueEndpoint=http://127.0.0.1:10001/devstoreaccount1;TableEndpoint=http://127.0.0.1:10002/devstoreaccount1;" >> $GITHUB_ENV
        echo "DurableTask__IsExternalClient=true" >> $GITHUB_ENV
        echo "DurableTask__TaskHub=${{ inputs.taskHubName }}" >> $GITHUB_ENV
        echo "Function__Name=${{ inputs.functionAppName }}" >> $GITHUB_ENV
        echo "Function__Namespace=${{ inputs.functionAppNamespace }}" >> $GITHUB_ENV
        echo "Kubernetes__Context=kind-integration" >> $GITHUB_ENV
        echo "Scaling__ActivityDuration=${{ inputs.testActivityDuration }}" >> $GITHUB_ENV
        echo "Scaling__MaxActivitiesPerWorker=${{ inputs.maxActivitiesPerWorker }}" >> $GITHUB_ENV
        echo "Scaling__PollingInterval=${{ inputs.testStatusPollingInterval }}" >> $GITHUB_ENV
        echo "Scaling__Timeout=${{ inputs.testTimeout }}" >> $GITHUB_ENV

    - name: Test Scaler
      shell: bash
      run: |
        kubectl port-forward service/azurite -n azure 10000:10000 10001:10001 10002:10002 >/dev/null &
        dotnet test "./tests/Keda.Scaler.DurableTask.AzureStorage.Test.Integration/Keda.Scaler.DurableTask.AzureStorage.Test.Integration.csproj" \
          -c "${{ inputs.buildConfiguration }}" \
          -p:ContinuousIntegrationBuild=true \
          -warnaserror

    - name: Uninstall Function App Helm Chart
      shell: bash
      run: helm uninstall -n ${{ inputs.functionAppNamespace }} --wait --timeout 30s ${{ inputs.functionAppName }}

    - name: Uninstall Azurite Helm Chart
      shell: bash
      run: helm uninstall -n azure --wait --timeout 30s azurite

    - name: Uninstall Scaler Helm Chart
      shell: bash
      run: helm uninstall -n keda --wait --timeout 30s dtfx-scaler

    - name: Uninstall Keda Helm Chart
      shell: bash
      run: helm uninstall -n keda --wait --timeout 1m keda

    - name: Delete Cluster
      shell: bash
      run: kind delete cluster --name integration
