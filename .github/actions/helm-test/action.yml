name: helm test
description: Ensures the external scaler installation succeeds and can properly scale function apps
inputs:
  buildConfiguration:
    default: Debug
    description: The dotnet build configuration
    required: false
  functionAppName:
    default: example-function-app
    description: The Kubernetes namespace for the function app
    required: false
  functionAppNamespace:
    default: test
    description: The Kubernetes namespace for the function app
    required: false
  imageTag:
    description: The tag to use for the images
    required: true
  maxActivitiesPerWorker:
    default: '2'
    description: The maximum number of activities per worker
    required: false
  partitionCount:
    default: '1'
    description: The task hub partition count
    required: false
  scalerImageRepository:
    default: durabletask-azurestorage-scaler
    description: The repository used for the scaler image
    required: false
  taskHubName:
    default: ExampleTaskHub
    description: The name of the Durable Task Hub
    required: false
  testActivityDuration:
    default: 00:00:30
    description: The duration of each activity
    required: false
  testStatusPollingInterval:
    default: 00:00:02
    description: The polling interval when checking test conditions
    required: false
  testTimeout:
    default: 00:10:00
    description: The timeout for each test case
    required: false

runs:
  using: composite
  steps:
    - name: Setup dotnet
      uses: actions/setup-dotnet@v4

    - name: Lint Helm Chart
      shell: bash
      run: |
        helm lint \
          -n keda \
          --set image.repository=${{ inputs.scalerImageRepository }} \
          --set image.tag=${{ inputs.imageTag }} \
          ./charts/durabletask-azurestorage-scaler

    - name: Build Function App Image
      shell: bash
      run: docker build -f "./tests/Keda.Scaler.Functions.Worker.DurableTask.Examples/Dockerfile" -t "example-function-app:${{ inputs.imageTag }}" .

    - name: Create Kind Cluster
      shell: bash
      run: |
        go install sigs.k8s.io/kind@latest
        kind create cluster --name integration
        kind load docker-image "${{ inputs.scalerImageRepository }}:${{ inputs.imageTag }}" "example-function-app:${{ inputs.imageTag }}" --name integration
        kubectl config use-context kind-integration

    - name: Create TLS Secrets
      shell: bash
      run: |
        kubectl create namespace keda
        kubectl create namespace ${{ inputs.functionAppNamespace }}
        mkdir -p ${{ runner.temp }}/certs

        # Create CA Root Certificate
        # Note that the secret is both in the KEDA namespace and in the function app namespace
        # as both KEDA and the function app validate each other's TLS certificate
        openssl req \
          -x509 \
          -noenc \
          -new \
          -newkey rsa:2048 \
          -days 1 \
          -subj "/C=US/CN=Integration Tests" \
          -keyout ${{ runner.temp }}/certs/root.key \
          -out ${{ runner.temp }}/certs/root.pem

        kubectl create secret tls self-signed-ca \
          -n keda \
          --cert=${{ runner.temp }}/certs/root.pem \
          --key=${{ runner.temp }}/certs/root.key

        kubectl create secret tls self-signed-ca \
          -n ${{ inputs.functionAppNamespace }} \
          --cert=${{ runner.temp }}/certs/root.pem \
          --key=${{ runner.temp }}/certs/root.key

        # Create a client TLS certificate for KEDA
        printf "basicConstraints=CA:FALSE\nsubjectAltName=DNS:keda-operator.keda,IP:127.0.0.1\n" >> ${{ runner.temp }}/certs/client.ext

        openssl req \
          -noenc \
          -new \
          -newkey rsa:2048 \
          -subj "/C=US/ST=Washington/L=Redmond/O=KEDA/CN=keda-operator.keda" \
          -addext "subjectAltName = DNS:keda-operator.keda, IP:127.0.0.1" \
          -keyout ${{ runner.temp }}/certs/client.key \
          -out ${{ runner.temp }}/certs/client.csr

        openssl x509 \
          -req \
          -in ${{ runner.temp }}/certs/client.csr \
          -extfile ${{ runner.temp }}/certs/client.ext \
          -CA ${{ runner.temp }}/certs/root.pem \
          -CAkey ${{ runner.temp }}/certs/root.key \
          -CAcreateserial \
          -days 1 \
          -out ${{ runner.temp }}/certs/client.pem

        kubectl create secret tls client-tls \
          -n ${{ inputs.functionAppNamespace }} \
          --cert=${{ runner.temp }}/certs/client.pem \
          --key=${{ runner.temp }}/certs/client.key

        # Create a server TLS certificate for the DTFx scaler
        printf "basicConstraints=CA:FALSE\nsubjectAltName=DNS:dtfx-scaler.keda,IP:127.0.0.1\n" >> ${{ runner.temp }}/certs/server.ext

        openssl req \
          -noenc \
          -new \
          -newkey rsa:2048 \
          -subj "/C=US/ST=Washington/L=Redmond/O=DTFx Scaler/CN=dtfx-scaler.keda" \
          -addext "subjectAltName = DNS:dtfx-scaler.keda, IP:127.0.0.1" \
          -keyout ${{ runner.temp }}/certs/server.key \
          -out ${{ runner.temp }}/certs/server.csr

        openssl x509 \
          -req \
          -in ${{ runner.temp }}/certs/server.csr \
          -extfile ${{ runner.temp }}/certs/server.ext \
          -CA ${{ runner.temp }}/certs/root.pem \
          -CAkey ${{ runner.temp }}/certs/root.key \
          -CAcreateserial \
          -days 1 \
          -out ${{ runner.temp }}/certs/server.pem

        kubectl create secret tls server-tls \
          -n keda \
          --cert=${{ runner.temp }}/certs/server.pem \
          --key=${{ runner.temp }}/certs/server.key

    - name: Install KEDA
      shell: bash
      run: |
        helm repo add kedacore https://kedacore.github.io/charts
        helm repo update
        helm install \
          -n keda \
          --create-namespace \
          --wait \
          --timeout 2m \
          keda \
          kedacore/keda

    - name: Install Default Scaler Helm Chart
      shell: bash
      run: |
        helm install \
          -n keda \
          --create-namespace \
          --set image.repository=${{ inputs.scalerImageRepository }} \
          --set image.tag=${{ inputs.imageTag }} \
          --set logging.level=debug \
          --wait \
          --timeout 30s \
          plaintext-dtfx-scaler \
          ./charts/durabletask-azurestorage-scaler

    - name: Install Scaler Helm Chart
      shell: bash
      run: |
        helm install \
          -n keda \
          --create-namespace \
          --set image.repository=${{ inputs.scalerImageRepository }} \
          --set image.tag=${{ inputs.imageTag }} \
          --set logging.level=debug \
          --set tls.caSecret=self-signed-ca \
          --set tls.secret=server-tls \
          --wait \
          --timeout 30s \
          dtfx-scaler \
          ./charts/durabletask-azurestorage-scaler

    - name: Install Azurite Helm Chart
      shell: bash
      run: helm install -n azure --create-namespace --wait --timeout 30s azurite ./charts/azurite

    - name: Install Function App Helm Chart
      shell: bash
      run: |
        helm install \
          -n ${{ inputs.functionAppNamespace }} \
          --create-namespace \
          --set externalScaler.serviceName=dtfx-scaler \
          --set image.repository=example-function-app \
          --set image.tag=${{ inputs.imageTag }} \
          --set scaledObject.caCertSecret=self-signed-ca \
          --set scaledObject.pollingInterval=2 \
          --set scaledObject.tlsClientCertSecret=client-tls \
          --set "taskHub.connectionString=DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://azurite.azure:10000/devstoreaccount1;QueueEndpoint=http://azurite.azure:10001/devstoreaccount1;TableEndpoint=http://azurite.azure:10002/devstoreaccount1;" \
          --set taskHub.name=${{ inputs.taskHubName }} \
          --set taskHub.maxActivitiesPerWorker=${{ inputs.maxActivitiesPerWorker }} \
          --set taskHub.partitionCount=${{ inputs.partitionCount }} \
          --wait \
          --timeout 30s \
          ${{ inputs.functionAppName }} \
          ./charts/example-function-app

    - name: Ensure Reachable Scaler Services
      shell: bash
      run: |
        kubectl port-forward service/plaintext-dtfx-scaler -n keda 10003:4370 > /dev/null &
        kubectl port-forward service/dtfx-scaler -n keda 10004:4370 > /dev/null &

        export PATH=$PATH:$(go env GOPATH)/bin
        go install github.com/fullstorydev/grpcurl/cmd/grpcurl@latest

        # Test without TLS
        grpcurl \
          -plaintext \
          -import-path "${{ github.workspace }}/src/Keda.Scaler.DurableTask.AzureStorage/Protos" \
          -proto "externalscaler.proto" \
          -d '{"name":"foo", "namespace":"bar", "scalerMetadata": {"connection":"baz"}}' \
          -vv \
          127.0.0.1:10003 \
          externalscaler.ExternalScaler/GetMetricSpec 1> /dev/null

        # Test with TLS
        grpcurl \
          -cacert "${{ runner.temp }}/certs/root.pem" \
          -cert "${{ runner.temp }}/certs/client.pem" \
          -key "${{ runner.temp }}/certs/client.key" \
          -import-path "${{ github.workspace }}/src/Keda.Scaler.DurableTask.AzureStorage/Protos" \
          -proto "externalscaler.proto" \
          -d '{"name":"foo", "namespace":"bar", "scalerMetadata": {"connection":"baz"}}' \
          -vv \
          127.0.0.1:10004 \
          externalscaler.ExternalScaler/GetMetricSpec 1> /dev/null

    - name: Get Keda Logs
      shell: bash
      if: ${{ always() }}
      run: kubectl logs --tail=-1 --prefix -l app=keda-operator -n keda

    - name: Get Scaler Logs
      shell: bash
      if: ${{ always() }}
      run: kubectl logs --tail=-1 --prefix -l app=dtfx-scaler -n keda

    - name: Uninstall Function App Helm Chart
      shell: bash
      run: helm uninstall -n ${{ inputs.functionAppNamespace }} --wait --timeout 30s ${{ inputs.functionAppName }}

    - name: Uninstall Azurite Helm Chart
      shell: bash
      run: helm uninstall -n azure --wait --timeout 30s azurite

    - name: Uninstall Scaler Helm Chart
      shell: bash
      run: helm uninstall -n keda --wait --timeout 30s dtfx-scaler

    - name: Uninstall Keda Helm Chart
      shell: bash
      run: helm uninstall -n keda --wait --timeout 1m keda

    - name: Delete Cluster
      shell: bash
      run: kind delete cluster --name integration
